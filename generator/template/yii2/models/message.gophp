<?php
namespace {{ .NameSpace }};

use Yoozoo\ProtoApi;

class {{className .Name }} implements ProtoApi\Message
{
    {{- range .Fields }}
    protected ${{.Name}};
    {{- end}}

    public function init(array $response)
    {
        {{- range .Fields }}
        if (isset($response["{{.Name}}"])) {
            {{- if isObject .DataType }}
              {{- if eq .Label "LABEL_REPEATED"}}
            $val = $response["{{.Name}}"];
            $this->set_{{.Name}}( array_map( function($v) { $tmp = new {{className .DataType}}(); $tmp->init($v); return $tmp; }, $val) );
              {{- else}}
            $this->{{.Name}} = new {{className .DataType}}();
            $this->{{.Name}}->init($response["{{.Name}}"]);
              {{- end}}
            {{- else if isEnum .DataType}}
              {{- if eq .Label "LABEL_REPEATED"}}
            $val = $response["{{.Name}}"];
            $this->set_{{.Name}}( array_map( function($v) { return new {{className .DataType}}($v); }, $val) );
              {{- else}}
            $this->set_{{.Name}} (new {{className .DataType}}($response["{{.Name}}"]));
              {{- end}}
            {{- else}}
            $this->set_{{.Name}} ( $response["{{.Name}}"] );
            {{- end}}
        }
        {{- end}}
    }

    public function validate()
    {
        {{- range .Fields }}
        if (!isset($this->{{.Name}})) {
            throw new ProtoApi\GeneralException("'{{.Name}}' is not exist");
        }
            {{- if isObject .DataType }}
                {{- if eq .Label "LABEL_REPEATED"}}
        array_filter($this->{{.Name}}, function($v) { $v->validate(); return false; });
                {{- else}}
        $this->{{.Name}}->validate();
                {{- end}}
            {{- end}}
        {{- end}}
    }
    {{range .Fields }}
    public function set_{{.Name}}({{- if eq .Label "LABEL_REPEATED"}}array{{else}}{{className .DataType}}{{end}} ${{.Name}})
    {
        $this->{{.Name}} = ${{.Name}};
    }

    public function get_{{.Name}}()
    {
        return $this->{{.Name}};
    }
    {{end}}
    public function to_array()
    {
        return array(
        {{- range .Fields }}
            {{- if isObject .DataType }}
              {{- if eq .Label "LABEL_REPEATED"}}
            "{{.Name}}" => array_map( function ($v) {  return $v->to_array(); }, $this->{{.Name}}),
              {{- else}}
            "{{.Name}}" =>  $this->{{.Name}}->to_array(),
              {{- end}}
            {{- else}}
            "{{.Name}}" => $this->{{.Name}},
            {{- end}}
        {{- end}}
        );
    }
}
