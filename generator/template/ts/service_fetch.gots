/**
* This file is generated by 'protoapi'
* The file contains frontend API code that work with fetch API for HTTP usages
* The generated code is written in TypeScript
* The code provides a basic usage for API call and may need adjustment according to specific project requirement and situation
* -------------------------------------------
* 该文件生成于protoapi
* 文件包含前端调用API的代码，并使用fetch做HTTP调用
* 文件内代码使用TypeScript
* 该生成文件只提供前端API调用基本代码，实际情况可能需要根据具体项目具体要求不同而作出更改
*/
import {
    {{range $type, $bool := (getImportDataTypes .Functions)}}
    {{- $type }},
    {{end}}
} from './{{.ClassName}}Objs';
import { generateUrl, errorHandling } from './helper';

let baseUrl = "backend";
const headers = {
    "X-Requested-With": "XMLHttpRequest",
    "Content-Type": "application/json"
};

export function SetBaseUrl(url: string) {
    baseUrl = url;
}

export function setHeader(header: {[key: string]: string}) {
    return Object.assign(headers, header);
}

{{- $className := .ClassName -}}

// use fetch
async function call<InType, OutType>(
    service: string,
    method: string,
    params: InType
): Promise<OutType | never> {
    const url = generateUrl(baseUrl, service, method);
    try {
        const fetchResolve = await fetch(url, {
            method: 'POST',
            body: JSON.stringify(params),
            headers
        });

        const resolvedData = await fetchResolve.json();

        if (fetchResolve.status !== 200) {
            const parsedError = {
                headers: fetchResolve.headers,
                type: fetchResolve.type,
                statusText: fetchResolve.statusText,
                status: fetchResolve.status,
                ok: fetchResolve.ok,
                redirected: fetchResolve.redirected,
                url: fetchResolve.url,
                data: resolvedData,
            }
            throw (parsedError);
        }
        return resolvedData as OutType;
    }
    catch (err) {
        const handledError = await errorHandling(err);
        throw handledError;
    }
}

{{- range .Functions}}
{{- $error :=  (getErrorType .Options) }}
export function {{.Name}}(params: {{.InputType}}): Promise<{{.OutputType}} | never> {
    return call<{{.InputType}}, {{.OutputType}}>("{{$className}}", "{{.Name}}", params);
}
{{end -}}
